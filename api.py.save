#!/usr/bin/env python
import os
import shutil
import tempfile
import time
from sys import path

from flask import Flask, abort, request, jsonify, g, url_for, flash, make_response
from flask_sqlalchemy import SQLAlchemy
from flask_httpauth import HTTPBasicAuth
import jwt
from flask_cors import CORS, cross_origin
from sqlalchemy import engine, desc, true

from datetime import timedelta
from flask import make_response, request, current_app
from functools import update_wrapper

from werkzeug.security import generate_password_hash, check_password_hash
from sqlalchemy.orm import sessionmaker
# initialization
from werkzeug.utils import secure_filename

from helper import *

from flask_cors import CORS

app = Flask(__name__)
app.config['SECRET_KEY'] = 'the quick brown fox jumps over the lazy dog'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite'
app.config['SQLALCHEMY_COMMIT_ON_TEARDOWN'] = True
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['CORS_HEADERS'] = 'Content-Type'

CORS(app, origins="*", allow_headers="*")
#cors = CORS(app, resources={r"/api/*": {"origins": "*"}})
# extensions
db = SQLAlchemy(app)
auth = HTTPBasicAuth()

class Modification(db.Model):
    __tablename__ ="Modification"
    id_modification = db.Column(db.Integer, primary_key=True)
    type_modification= db.Column(db.Integer)
    message = db.Column(db.String(255))
    id_reference =  db.Column(db.Integer)

class AvisProf(db.Model):
    __tablename__ = 'AvisProf'
    id_avis = db.Column(db.Integer, primary_key=True)
    prof = db.Column(db.String(128))
    avis = db.Column(db.String(255))
    matiere = db.Column(db.String(128))
    id_candidature = db.Column(db.Integer, db.ForeignKey('Candidature.id_candidature'))

    def serialize(self):
        """Return object data in easily serializable format"""
        return {
            'id_avis':self.id_avis,
            'prof':self.prof,
            'avis': self.avis,
            'id_candidature':self.id_candidature,
            'matiere':self.matiere

        }

class User(db.Model):
    __tablename__ = 'User'
    id = db.Column(db.Integer, primary_key=True)
    nom = db.Column(db.String(32), index=True)
    prenom = db.Column(db.String(32), index=True)
    numero = db.Column(db.Integer)
    password_hash = db.Column(db.String(128))
    groupeTD = db.Column(db.String(32), index=True)
    mail = db.Column(db.String(128))
    genre = db.Column(db.Integer)
    rank = db.Column(db.Integer)

    def hash_password(self, password):
        self.password_hash = generate_password_hash(password)

    def verify_password(self, password):
        return check_password_hash(self.password_hash, password)

    def generate_auth_token(self, expires_in=60000):
        return jwt.encode(
            {'id': self.id, 'exp': time.time() + expires_in},
            app.config['SECRET_KEY'], algorithm='HS256')

    def serialize(self):
        """Return object data in easily serializable format"""
        return {
            'id': self.id,
            'nom': self.nom,
            'prenom': self.prenom,
            'numero': self.numero,
            'groupeTD': self.groupeTD,
            'mail': self.mail,
            'genre': self.genre,
            'rank': self.rank
        }

    @staticmethod
    def verify_auth_token(token):
        try:
            data = jwt.decode(token, app.config['SECRET_KEY'],
                              algorithms=['HS256'])
        except:
            return
        return User.query.get(data['id'])


class ForumInfo(db.Model):
    __tablename__ = 'ForumInfo'
    id_forum_info = db.Column(db.Integer, primary_key=True)
    lien_visio = db.Column(db.String(128))
    lien_video = db.Column(db.String(128))

    def serialize(self):
        """Return object data in easily serializable format"""
        return {
            'id_forum_info': self.id_forum_info,
            'lien_visio': self.lien_visio,
            'lien_video': self.lien_video

        }


class ParticipationForum(db.Model):
    __tablename__ = 'ParticiationForum'
    id_participation_forum_info = db.Column(db.Integer, primary_key=True)
    id_formation = db.Column(db.Integer, db.ForeignKey('Formation.id_formation'))
    id_forum_info = db.Column(db.Integer, db.ForeignKey('ForumInfo.id_forum_info'))
    annee = db.Column(db.Integer)

    def serialize(self):
        """Return object data in easily serializable format"""
        return {
            'id_participation_forum_info': self.id_participation_forum_info,
            'id_formation': self.id_formation,
            'id_forum_info': self.id_forum_info,
            'anne': self.annee
        }


class TypeEcole(db.Model):
    __tablename__ = 'TypeEcole'
    id_type_ecole = db.Column(db.Integer, primary_key=True)
    nom_type = db.Column(db.String(128))

    def serialize(self):
        """Return object data in easily serializable format"""
        return {
            'id_type_ecole': self.id_type_ecole,
            'nom_type': self.nom_type
        }


class Ecole(db.Model):
    __tablename__ = 'Ecole'
    id_ecole = db.Column(db.Integer, primary_key=True)
    nom_ecole = db.Column(db.String(128))
    complement_ecole = db.Column(db.String(128))
    descirption = db.Column(db.String(255))
    id_type_ecole = db.Column(db.Integer, db.ForeignKey('TypeEcole.id_type_ecole'))
    id_adresse_ecole = db.Column(db.Integer, db.ForeignKey('Adresse.id_adresse'))
    valide = db.Column(db.Boolean)

    def serialize(self):
        return {
            'id_ecole': self.id_ecole,
            'nom_ecole': self.nom_ecole,
            'complement_ecole': self.complement_ecole,
            'id_type_ecole': get_type_local(self.id_type_ecole),
            'adresse': get_adresse_local(self.id_adresse_ecole),
            'descirption': self.descirption,
            'formation': get_formation_by_ecole(self.id_ecole)
        }


def get_formation_by_ecole(id):
    formations = Formation.query.filter_by(id_ecole=id).all()
    if formations is None:
        return {}
    data = []
    for f in formations:
        data.append(f.serialize())
    return data


def get_type_local(id):
    type = TypeEcole.query.filter_by(id_type_ecole=id).first()
    if type is None:
        return jsonify({})
    return type.nom_type


def get_adresse_local(id):
    adresse = Adresse.query.filter_by(id_adresse=id).first()

    if adresse is None:
        return jsonify({})
    if g.user.rank != Rank.ADMIN.value and g.user.rank != Rank.USER.value:
        return jsonify({})
    return adresse.serialize()


class Adresse(db.Model):
    __tablename__ = 'Adresse'
    id_adresse = db.Column(db.Integer, primary_key=True)
    num_rue = db.Column(db.String(128))
    nom_rue = db.Column(db.String(128))
    ville = db.Column(db.String(128))
    cp = db.Column(db.String(128))
    pays = db.Column(db.String(128))

    def serialize(self):
        return {
            'id_adresse': self.id_adresse,
            'num_rue': self.num_rue,
            'nom_rue': self.nom_rue,
            'ville': self.ville,
            'cp': self.cp,
            'pays': self.pays
        }


class ResponsableFormation(db.Model):
    __tablename__ = 'ResponsableFormation'
    id_responsable = db.Column(db.Integer, primary_key=True)
    nom_responsable = db.Column(db.String(128))
    prenom_responsable = db.Column(db.String(128))
    mail_responsable = db.Column(db.String(128))
    telephone_responsable = db.Column(db.String(128))
    valide = db.Column(db.Boolean)

    def serialize(self):
        return {
            'id_responsable': self.id_responsable,
            'nom_responsable': self.nom_responsable,
            'prenom_responsable': self.prenom_responsable,
            'mail_responsable': self.mail_responsable,
            'telephone_responsable': self.telephone_responsable
        }


class Candidature(db.Model):
    __tablename__ = 'Candidature'
    id_candidature = db.Column(db.Integer, primary_key=True)
    id_etudiant = db.Column(db.Integer, db.ForeignKey('User.id'))
    etat = db.Column(db.Integer)
    date_candidature = db.Column(db.Integer)
    deadline_dossier = db.Column(db.Integer)
    validationPE = db.Column(db.Boolean)
    voeux = db.Column(db.Integer)
    id_formation = db.Column(db.Integer, db.ForeignKey('Formation.id_formation'))

    def serialize(self):
        return {
            'id_candidature': self.id_candidature,
            'id_etudiant': self.id_etudiant,
            'etat': self.etat,
            'date_candidature': self.date_candidature,
            'deadline_dossier': self.deadline_dossier,
            'validationPE': self.validationPE,
            'id_formation': self.id_formation,
            'voeux': self.voeux,
            'formation-c':[]
        }


class Formation(db.Model):
    __tablename__ = 'Formation'
    id_formation = db.Column(db.Integer, primary_key=True)
    specialite = db.Column(db.String(128))
    description = db.Column(db.String(255))
    site_web_url = db.Column(db.String(255))
    brochure_url = db.Column(db.String(255))
    alternance = db.Column(db.Boolean)
    niveau = db.Column(db.Integer)
    type_formation = db.Column(db.Boolean)
    id_responsable = db.Column(db.Integer, db.ForeignKey('ResponsableFormation.id_responsable'))
    id_ecole = db.Column(db.Integer, db.ForeignKey('Ecole.id_ecole'))
    valide = db.Column(db.Boolean)

    def serialize(self):
        return {
            'id_formation': self.id_formation,
            'specialite': self.specialite,
            'description': self.description,
            'site_web_url': self.site_web_url,
            'brochure_url': self.brochure_url,
            'alternance': self.alternance,
            'type_formation': self.type_formation,
            'id_ecole': self.id_ecole,
            'niveau':self.niveau,
            'id_responsable': self.id_responsable,
            'ecole-f':[]
        }


class ProfilRecruter(db.Model):
    __tablename__ = 'ProfilRecruter'
    id_profil_recruter = db.Column(db.Integer, primary_key=True)
    id_formation = db.Column(db.Integer, db.ForeignKey('Formation.id_formation'))
    id_profil = db.Column(db.Integer, db.ForeignKey('Profil.id_profil'))

    def serialize(self):
        return {
            'id_profil_recruter': self.id_profil_recruter,
            'id_formation': self.id_formation,
            'id_profil': self.id_profil
        }


class Profil(db.Model):
    __tablename__ = 'Profil'
    id_profil = db.Column(db.Integer, primary_key=True)
    nom_profil = db.Column(db.String(128))

    def serialize(self):
        return {
            'id_profil': self.id_profil,
            'nom_profil': self.nom_profil
        }


class actionPE(db.Model):
    __tablename__ = 'actionPE'
    id_action = db.Column(db.Integer, primary_key=True)
    action = db.Column(db.String(255))
    id_etudiant = db.Column(db.Integer, db.ForeignKey('User.id'))
    id_candidature = db.Column(db.Integer, db.ForeignKey('Candidature.id_candidature'))
    lu = db.Column(db.Boolean)

    def serialize(self):
        return {
            'id_action': self.id_action,
            'action': self.action,
            'id_etudiant': self.id_etudiant,
            'id_candidature': self.id_candidature
        }


# Check
@auth.verify_password
def verify_password(username_or_token, password):
    # first try to authenticate by token
    print("user or tocken " + username_or_token)
    user = User.verify_auth_token(username_or_token)
    if not user:
        # try to authenticate with username/password
        user = User.query.filter_by(mail=username_or_token).first()
        if not user or not user.verify_password(password):
            return False
    g.user = user
    return True


# ----------------------------ADMIN
